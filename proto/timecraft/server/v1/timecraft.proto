syntax = "proto3";

package timecraft.server.v1;

message TaskRequest {
  ModuleSpec module = 1;
  oneof input {
    HTTPRequest http_request = 2;
  }
}

message TaskResponse {
  string task_id = 1;
  TaskState state = 2;
  string process_id = 3;
  string error_message = 4;
  oneof output {
    HTTPResponse http_response = 5;
  }
}

message ModuleSpec {
  string path = 1;
  repeated string args = 2;
  repeated string env = 3;
  int64 capabilities = 4;
}

enum ModuleCapabilities {
  // These are intended to be used in a bitset, so stick
  // with powers of two (0, 1, 2, 4, 8, 16, etc).
  MODULE_CAPABILITIES_UNSPECIFIED = 0;
  MODULE_CAPABILITIES_HOST_NETWORKING = 1;
}

message HTTPRequest {
  string method = 1;
  string path = 2;
  repeated Header headers = 3;
  bytes body = 4;
  int32 port = 5;
}

message HTTPResponse {
  int32 status_code = 1;
  repeated Header headers = 2;
  bytes body = 3;
}

message Header {
  string name = 1;
  string value = 2;
}

enum TaskState {
  TASK_STATE_UNSPECIFIED = 0; // required by buf lint
  TASK_STATE_QUEUED = 1;
  TASK_STATE_INITIALIZING = 2;
  TASK_STATE_EXECUTING = 3;
  TASK_STATE_ERROR = 4;
  TASK_STATE_SUCCESS = 5;
}

message SubmitTasksRequest {
  repeated TaskRequest requests = 1;
}

message SubmitTasksResponse {
  repeated string task_id = 1;
}

message LookupTasksRequest {
  repeated string task_id = 1;
}

message LookupTasksResponse {
  repeated TaskResponse responses = 1;
}

message PollTasksRequest {
  int32 batch_size = 1;
  int64 timeout_ns = 2;
}

message PollTasksResponse {
  repeated TaskResponse responses = 1;
}

message DiscardTasksRequest {
  repeated string task_id = 1;
}

message DiscardTasksResponse {}

message ProcessIDRequest {}

message ProcessIDResponse {
  string process_id = 1;
}

message SpawnRequest {
  ModuleSpec module = 1;
}

message SpawnResponse {
  string process_id = 1;
  string ip_address = 2;
}

message KillRequest {
  string process_id = 1;
}

message KillResponse {}

message VersionRequest {}

message VersionResponse {
  string version = 1;
}

service TimecraftService {
  // Task scheduling.
  rpc SubmitTasks(SubmitTasksRequest) returns (SubmitTasksResponse) {}
  rpc LookupTasks(LookupTasksRequest) returns (LookupTasksResponse) {}
  rpc PollTasks(PollTasksRequest) returns (PollTasksResponse) {}
  rpc DiscardTasks(DiscardTasksRequest) returns (DiscardTasksResponse) {}

  // Process management.
  rpc ProcessID(ProcessIDRequest) returns (ProcessIDResponse) {}
  rpc Spawn(SpawnRequest) returns (SpawnResponse) {}
  rpc Kill(KillRequest) returns (KillResponse) {}

  // Misc endpoints.
  rpc Version(VersionRequest) returns (VersionResponse) {}
}
