include "../types/types.fbs";

namespace logsegment;

// Runtime captures information about the runtime that recorded the log.
table Runtime {
 runtime:string (required);
 version:string (required);
 functions:[Function];
}

// Function represents a function from a host module.
table Function {
 module:string (required);
 name:string (required);
 param_count: uint;
 result_count: uint;
}

// Process contains information about the process that the log was recorded for.
table Process {
 // A globally unique identifier for the process.
 id:types.Hash (required);
 // OCI identifier of the WebAssembly module image that the process was
 // instantiated from.
 image:types.Hash (required);
 // The unix start time of the process (in nanoseconds).
 unix_start_time:long;
 // List of arguments passed to the process when it was started.
 arguments:[string];
 // List of environment variables passed to the process when it was started.
 environment:[string];
 // Unique identifier of the parent that created this process (may be zero).
 parent_process_id:types.Hash;
 // Logical offset in the parent log of the host call that created the process.
 parent_fork_offset:long;
}

// Header represents the very first section of the log recording information
// about the runtime and the process being recorded.
table LogHeader {
 runtime:Runtime (required);
 process:Process (required);
 segment:uint; // index of the log segment
 compression:types.Compression;
}

// The RecordBatch table represents a group of records. Metadata about the records
// is embedded in the record batch, and the records themselves are concatenated in
// compressed form.
table RecordBatch {
 // Logical offset of the first record in this batch.
 first_offset:long;
 // Monotonic timestamp of the first record in this batch, relative to the process start
 // time of the function invocation time (expressed in nanoseconds).
 first_timestamp:long;
 // Size of the compressed records following the record batch (in bytes).
 compressed_size:uint;
 // Uncompressed size of the records (in bytes).
 uncompressed_size:uint;
 // Number of records in the batch.
 num_records:uint;
 // CRC32 (Castagnoli) checksum of the compressed records following the record batch.
 checksum:uint;
}

// The Record table holds metdata about the recording of a single host function
// call.
table Record {
 // Monotonic timestamp relative to the process start time of the function
 // invocation time (expressed in nanoseconds).
 timestamp:long;
 // ID of the function, which is the index into the Runtime function table.
 function_id:uint;
 // Details about the function call. A FunctionCall table is provided for
 // capturing the information required to reproduce the function call
 // (stack + memory), however users are allowed to store arbitrary bytes
 // here and may choose to use more efficient representations for some
 // functions.
 function_call:[ubyte];
}

// Details about a function call.
table FunctionCall {
 // State of the WebAssembly stack before and after the function was called.
 // The first {param_count} values are the input parameters, and the remaining
 // values are the return values.
 stack:[ulong];
 // Captured sections of the WebAssembly module's linear memory, stored
 // contiguously and indexed by {memory_access}.
 memory:[uint8];
 // Ordered collection of memory reads and writes made by the function.
 memory_access:[MemoryAccess];
}

// MemoryAccess represents the capture of a section of memory.
struct MemoryAccess {
 // Byte offset in the WebAssembly module's linear memory where the memory
 // access starts.
 offset:uint;
 // Byte offset into {FunctionCall.memory}. The length of the captured memory
 // can be derived by comparing the {index_offset} with that of the next
 // {FunctionCall.memory_access}. The length of the final memory region can
 // be derived by comparing the {index_offset} with the length of
 // {FunctionCall.memory}.
 index_offset:uint;
}

root_type LogHeader;

file_identifier "TL.0";
file_extension "log";
