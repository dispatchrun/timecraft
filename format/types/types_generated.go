// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package types

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Compression uint32

const (
	CompressionUncompressed Compression = 0
	CompressionSnappy       Compression = 1
	CompressionZstd         Compression = 2
)

var EnumNamesCompression = map[Compression]string{
	CompressionUncompressed: "Uncompressed",
	CompressionSnappy:       "Snappy",
	CompressionZstd:         "Zstd",
}

var EnumValuesCompression = map[string]Compression{
	"Uncompressed": CompressionUncompressed,
	"Snappy":       CompressionSnappy,
	"Zstd":         CompressionZstd,
}

func (v Compression) String() string {
	if s, ok := EnumNamesCompression[v]; ok {
		return s
	}
	return "Compression(" + strconv.FormatInt(int64(v), 10) + ")"
}

type Hash struct {
	_tab flatbuffers.Table
}

func GetRootAsHash(buf []byte, offset flatbuffers.UOffsetT) *Hash {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Hash{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHash(buf []byte, offset flatbuffers.UOffsetT) *Hash {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Hash{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Hash) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hash) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Hash) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hash) Digest() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func HashStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func HashAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(algorithm), 0)
}
func HashAddDigest(builder *flatbuffers.Builder, digest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(digest), 0)
}
func HashEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
