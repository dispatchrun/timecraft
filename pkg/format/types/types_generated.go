// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package types

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Compression uint32

const (
	CompressionNone   Compression = 0
	CompressionSnappy Compression = 1
	CompressionZstd   Compression = 2
)

var EnumNamesCompression = map[Compression]string{
	CompressionNone:   "None",
	CompressionSnappy: "Snappy",
	CompressionZstd:   "Zstd",
}

var EnumValuesCompression = map[string]Compression{
	"None":   CompressionNone,
	"Snappy": CompressionSnappy,
	"Zstd":   CompressionZstd,
}

func (v Compression) String() string {
	if s, ok := EnumNamesCompression[v]; ok {
		return s
	}
	return "Compression(" + strconv.FormatInt(int64(v), 10) + ")"
}

type MemoryAccessType uint32

const (
	MemoryAccessTypeMemoryRead  MemoryAccessType = 0
	MemoryAccessTypeMemoryWrite MemoryAccessType = 1
)

var EnumNamesMemoryAccessType = map[MemoryAccessType]string{
	MemoryAccessTypeMemoryRead:  "MemoryRead",
	MemoryAccessTypeMemoryWrite: "MemoryWrite",
}

var EnumValuesMemoryAccessType = map[string]MemoryAccessType{
	"MemoryRead":  MemoryAccessTypeMemoryRead,
	"MemoryWrite": MemoryAccessTypeMemoryWrite,
}

func (v MemoryAccessType) String() string {
	if s, ok := EnumNamesMemoryAccessType[v]; ok {
		return s
	}
	return "MemoryAccessType(" + strconv.FormatInt(int64(v), 10) + ")"
}

type Hash struct {
	_tab flatbuffers.Table
}

func GetRootAsHash(buf []byte, offset flatbuffers.UOffsetT) *Hash {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Hash{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHash(buf []byte, offset flatbuffers.UOffsetT) *Hash {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Hash{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Hash) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hash) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Hash) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hash) Digest(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Hash) DigestLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Hash) DigestBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Hash) MutateDigest(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func HashStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func HashAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(algorithm), 0)
}
func HashAddDigest(builder *flatbuffers.Builder, digest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(digest), 0)
}
func HashStartDigestVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func HashEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type Record struct {
	_tab flatbuffers.Table
}

func GetRootAsRecord(buf []byte, offset flatbuffers.UOffsetT) *Record {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Record{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRecord(buf []byte, offset flatbuffers.UOffsetT) *Record {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Record{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Record) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Record) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Record) Timestamp() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Record) MutateTimestamp(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Record) Function() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Record) MutateFunction(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Record) Params(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Record) ParamsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Record) MutateParams(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Record) Results(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *Record) ResultsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Record) MutateResults(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func (rcv *Record) Offset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Record) MutateOffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *Record) Length() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Record) MutateLength(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *Record) MemoryAccess(obj *MemoryAccess, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Record) MemoryAccessLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func RecordAddTimestamp(builder *flatbuffers.Builder, timestamp int64) {
	builder.PrependInt64Slot(0, timestamp, 0)
}
func RecordAddFunction(builder *flatbuffers.Builder, function uint32) {
	builder.PrependUint32Slot(1, function, 0)
}
func RecordAddParams(builder *flatbuffers.Builder, params flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(params), 0)
}
func RecordStartParamsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func RecordAddResults(builder *flatbuffers.Builder, results flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(results), 0)
}
func RecordStartResultsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func RecordAddOffset(builder *flatbuffers.Builder, offset uint32) {
	builder.PrependUint32Slot(4, offset, 0)
}
func RecordAddLength(builder *flatbuffers.Builder, length uint32) {
	builder.PrependUint32Slot(5, length, 0)
}
func RecordAddMemoryAccess(builder *flatbuffers.Builder, memoryAccess flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(memoryAccess), 0)
}
func RecordStartMemoryAccessVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 4)
}
func RecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type MemoryAccess struct {
	_tab flatbuffers.Struct
}

func (rcv *MemoryAccess) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemoryAccess) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *MemoryAccess) MemoryOffset() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *MemoryAccess) MutateMemoryOffset(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *MemoryAccess) RecordOffset() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *MemoryAccess) MutateRecordOffset(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func (rcv *MemoryAccess) Length() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(8))
}
func (rcv *MemoryAccess) MutateLength(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(8), n)
}

func (rcv *MemoryAccess) Access() MemoryAccessType {
	return MemoryAccessType(rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(12)))
}
func (rcv *MemoryAccess) MutateAccess(n MemoryAccessType) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(12), uint32(n))
}

func CreateMemoryAccess(builder *flatbuffers.Builder, memoryOffset uint32, recordOffset uint32, length uint32, access MemoryAccessType) flatbuffers.UOffsetT {
	builder.Prep(4, 16)
	builder.PrependUint32(uint32(access))
	builder.PrependUint32(length)
	builder.PrependUint32(recordOffset)
	builder.PrependUint32(memoryOffset)
	return builder.Offset()
}
