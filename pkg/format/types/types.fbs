namespace types;

// Compression is the enumeration representing the supported compression
// algorithms for data sections of log snapshots.
enum Compression:uint {
  None, Snappy, Zstd
}

// Hash represents a OCI hash which pairs an algorithm name to a digest.
// The digest length depends on the algorithm in use (e.g. 32 bytes for
// "sha256").
table Hash {
 algorithm:string (required);
 digest:[ubyte] (required);
}

// The Record table holds metdata about the recording of a single host function
// call.
table Record {
 // Monotonic timestamp relative to the process start time of the function
 // invocation time (expressed in nanoseconds).
 timestamp:long;
 // Index in the Runtime function table.
 function:uint;
 // State of the WebAssembly stack when the function was called and when it
 // returned.
 params:[ulong]; results:[ulong];
 // Offset and length of the record in the uncompressed record data following
 // the record batch. This contains all the memory access performed by the
 // function call.
 offset:uint;
 length:uint;
 // Sections of the record containing snapshots of each memory access done by
 // the function. The record_offset is relative to the beginning of the record
 // data (at offset in the uncompressed record batch).
 memory_access:[MemoryAccess];
}

enum MemoryAccessType:uint {
  MemoryRead, MemoryWrite
}

// MemoryAccess represents the capture of a section of memory that was either
// read or written during a host function call.
struct MemoryAccess {
 // Byte offset in the WebAssembly module's linear memory where the memory
 // access starts.
 memory_offset:uint;
 // Byte offset in the Record data section where the memory capture is written.
 record_offset:uint;
 // Size of the memory access (in bytes).
 length:uint;
 // Type of the recorded memory access (read or write).
 access:MemoryAccessType;
}
