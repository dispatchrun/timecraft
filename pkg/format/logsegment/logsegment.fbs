include "../types/types.fbs";

namespace logsegment;

// Runtime captures information about the runtime that recorded the log.
table Runtime {
 runtime:string (required);
 version:string (required);
 functions:[Function];
}

// Function represents a function from a host module.
table Function {
 module:string (required);
 name:string (required);
}

// Process contains information about the process that the log was recorded for.
table Process {
 // A globally unique identifier for the process.
 id:types.Hash (required);
 // OCI identifier of the WebAssembly module image that the process was
 // instantiated from.
 image:types.Hash (required);
 // The unix start time of the process (in nanoseconds).
 unix_start_time:long;
 // List of arguments passed to the process when it was started.
 arguments:[string];
 // List of environment variables passed to the process when it was started.
 environment:[string];
 // Unique identifier of the parent that created this process (may be zero).
 parent_process_id:types.Hash;
 // Logical offset in the parent log of the host call that created the process.
 parent_fork_offset:long;
}

// Header represents the very first section of the log recording information
// about the runtime and the process being recorded.
table LogHeader {
 runtime:Runtime (required);
 process:Process (required);
 segment:uint; // index of the log segment
 compression:types.Compression;
}

// The RecordBatch table represents a group of records. Metadata bout the record
// list is embedded in the record batch, followed by the concatenated memory
// snapshots of the records.
table RecordBatch {
 // Logical offset of the first record in this batch.
 first_offset:long;
 // Size of the memory snapshots following the record batch (in bytes).
 compressed_size:uint;
 // Uncompressed size of the memory snapshots (in bytes).
 uncompressed_size:uint;
 // CRC32 checksum of the memory snapshots (Castagnoli).
 checksum:uint;
 // List of records that are part of the batch.
 records:[Record];
}

// The Record table holds metdata about the recording of a single host function
// call.
table Record {
 // Monotonic timestamp relative to the process start time of the function
 // invocation time (expressed in nanoseconds).
 timestamp:long;
 // Index in the Runtime function table.
 function:uint;
 // State of the WebAssembly stack when the function was called and when it
 // returned.
 params:[ulong]; results:[ulong];
 // Offset and length of the record in the uncompressed record data following
 // the record batch. This contains all the memory access performed by the
 // function call.
 offset:uint;
 length:uint;
 // Sections of the record containing snapshots of each memory access done by
 // the function. The record_offset is relative to the beginning of the record
 // data (at offset in the uncompressed record batch).
 memory_access:[MemoryAccess];
}

// MemoryAccess represents the capture of a section of memory that was either
// read or written during a host function call.
struct MemoryAccess {
 // Byte offset in the WebAssembly module's linear memory where the memory
 // access starts.
 offset:uint;
 // Size of the memory access (in bytes).
 length:uint;
}

root_type LogHeader;

file_identifier "TL.0";
file_extension "log";
