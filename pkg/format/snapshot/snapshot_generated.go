// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package 

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type Compression uint32

const (
	CompressionNone   Compression = 0
	CompressionSnappy Compression = 1
	CompressionZstd   Compression = 2
)

var EnumNamesCompression = map[Compression]string{
	CompressionNone:   "None",
	CompressionSnappy: "Snappy",
	CompressionZstd:   "Zstd",
}

var EnumValuesCompression = map[string]Compression{
	"None":   CompressionNone,
	"Snappy": CompressionSnappy,
	"Zstd":   CompressionZstd,
}

func (v Compression) String() string {
	if s, ok := EnumNamesCompression[v]; ok {
		return s
	}
	return "Compression(" + strconv.FormatInt(int64(v), 10) + ")"
}

type LogSnapshot struct {
	_tab flatbuffers.Table
}

func GetRootAsLogSnapshot(buf []byte, offset flatbuffers.UOffsetT) *LogSnapshot {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogSnapshot{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsLogSnapshot(buf []byte, offset flatbuffers.UOffsetT) *LogSnapshot {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogSnapshot{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *LogSnapshot) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogSnapshot) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LogSnapshot) ProcessId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *LogSnapshot) ProcessIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LogSnapshot) ProcessIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LogSnapshot) MutateProcessId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *LogSnapshot) FirstOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogSnapshot) MutateFirstOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *LogSnapshot) LastOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogSnapshot) MutateLastOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *LogSnapshot) Checksum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LogSnapshot) MutateChecksum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *LogSnapshot) Compression() Compression {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return Compression(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LogSnapshot) MutateCompression(n Compression) bool {
	return rcv._tab.MutateUint32Slot(12, uint32(n))
}

func (rcv *LogSnapshot) MemoryPages(obj *MemoryPage, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *LogSnapshot) MemoryPagesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LogSnapshot) OpenFiles(obj *OpenFile, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *LogSnapshot) OpenFilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func LogSnapshotStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LogSnapshotAddProcessId(builder *flatbuffers.Builder, processId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(processId), 0)
}
func LogSnapshotStartProcessIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func LogSnapshotAddFirstOffset(builder *flatbuffers.Builder, firstOffset int64) {
	builder.PrependInt64Slot(1, firstOffset, 0)
}
func LogSnapshotAddLastOffset(builder *flatbuffers.Builder, lastOffset int64) {
	builder.PrependInt64Slot(2, lastOffset, 0)
}
func LogSnapshotAddChecksum(builder *flatbuffers.Builder, checksum uint32) {
	builder.PrependUint32Slot(3, checksum, 0)
}
func LogSnapshotAddCompression(builder *flatbuffers.Builder, compression Compression) {
	builder.PrependUint32Slot(4, uint32(compression), 0)
}
func LogSnapshotAddMemoryPages(builder *flatbuffers.Builder, memoryPages flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(memoryPages), 0)
}
func LogSnapshotStartMemoryPagesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func LogSnapshotAddOpenFiles(builder *flatbuffers.Builder, openFiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(openFiles), 0)
}
func LogSnapshotStartOpenFilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogSnapshotEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type MemoryPage struct {
	_tab flatbuffers.Struct
}

func (rcv *MemoryPage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemoryPage) Table() flatbuffers.Table {
	return rcv._tab.Table
}

func (rcv *MemoryPage) MemoryOffset() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(0))
}
func (rcv *MemoryPage) MutateMemoryOffset(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(0), n)
}

func (rcv *MemoryPage) RecordOffset() uint32 {
	return rcv._tab.GetUint32(rcv._tab.Pos + flatbuffers.UOffsetT(4))
}
func (rcv *MemoryPage) MutateRecordOffset(n uint32) bool {
	return rcv._tab.MutateUint32(rcv._tab.Pos+flatbuffers.UOffsetT(4), n)
}

func CreateMemoryPage(builder *flatbuffers.Builder, memoryOffset uint32, recordOffset uint32) flatbuffers.UOffsetT {
	builder.Prep(4, 8)
	builder.PrependUint32(recordOffset)
	builder.PrependUint32(memoryOffset)
	return builder.Offset()
}
type OpenFile struct {
	_tab flatbuffers.Table
}

func GetRootAsOpenFile(buf []byte, offset flatbuffers.UOffsetT) *OpenFile {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpenFile{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsOpenFile(buf []byte, offset flatbuffers.UOffsetT) *OpenFile {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OpenFile{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *OpenFile) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpenFile) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OpenFile) Fd() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpenFile) MutateFd(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *OpenFile) Seek() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *OpenFile) MutateSeek(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *OpenFile) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func OpenFileStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OpenFileAddFd(builder *flatbuffers.Builder, fd int32) {
	builder.PrependInt32Slot(0, fd, 0)
}
func OpenFileAddSeek(builder *flatbuffers.Builder, seek int64) {
	builder.PrependInt64Slot(1, seek, 0)
}
func OpenFileAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(path), 0)
}
func OpenFileEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
